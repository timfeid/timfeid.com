---
description: Inside Talky's Workflow Engine - A Deep Dive into Stateful Command Workflows
date: 1744936027
image: /posts/talky/006.png
category: talky
title: Talky - Adding a workflow integration for bots
tags:
  - "Rust"
  - "Svelte"
  - "TypeScript"
---

<script lang="ts">
  import GithubRepo from '$lib/components/app/project/github-repo.svelte'
</script>

# Talky - Adding a workflow integration for bots

<sup>name, talky, still a work in progress</sup>

![Screenshot](/posts/talky/005.webp)

The Talky platform supports a sophisticated command workflow engine that enables dynamic, stateful, and user-driven interactions. This system powers bots and assistants that operate through multi-step processes, optionally involving internal logic and external integrations. In this post, we'll explore the internals of this engine, which is built in Rust and orchestrated using an asynchronous, lock-safe architecture.

## Architecture: Nodes, Actions, and State

At the heart of Talky's workflow engine is a finite-state model defined by **workflow nodes** and **actions**. Each workflow is represented by a `WorkflowDefinition` which includes a graph of `WorkflowNode` objects. Nodes contain prompts, inputs, and a list of `WorkflowAction` options the user can take. These actions determine how the workflow progresses: transition to another node, run a server-side process, or complete the workflow.

Each running instance of a workflow is tracked as a `WorkflowState`, which includes the current node ID, historical navigation, collected input responses, and completion status. These instances are kept in memory using a `Mutex<HashMap>` keyed by `instance_id`, supporting concurrent access with Tokio’s async runtime.

## State Isolation and Concurrency

The engine maintains three primary collections wrapped in `Arc<Mutex<...>>`:

- `workflows`: All registered workflow definitions (i.e., schemas)
- `active_workflows`: In-progress workflow instances with live state
- `server_action_handlers`: Callback registry for internal server-side logic

This separation of static definitions and live instances ensures workflows can be reused across users, while still supporting per-user input and execution flow. Thanks to the Mutex-protected collections, Talky can safely manage state across concurrent user interactions without race conditions.

## Server Actions: Internal and External

A key feature of Talky's workflow engine is **server actions**. These are imperative logic blocks executed during workflows, usually triggered by a `WorkflowAction` with the `RunServerAction` type.

There are two kinds of server actions:

- **Internal server actions**: Defined and registered as closures using the `register_server_action()` method. These execute immediately and can update workflow state via `ServerActionResult`.
- **External server actions**: Defined declaratively in the workflow but executed outside the Rust backend, such as by another microservice. These require an event-driven request/response handshake via Kafka and a temporary channel.

External actions are tracked using a `HashMap<String, oneshot::Sender>` keyed by an ephemeral token. A timeout mechanism ensures that workflows don't hang indefinitely if no response arrives within the configured time window.

## From Command to Execution

When a user triggers a command that maps to a workflow, the bot delegates to the `WorkflowService::start_command_workflow` function. This spins up a new `WorkflowState`, inserts it into memory, and emits an event via Kafka to notify other systems (e.g., UI renderers or external processors).

When the user submits an action, `process_action()` determines the action type and handles it accordingly. For example:

- `NextNode` moves forward to a child node.
- `RunServerAction` initiates internal or external logic.
- `Submit` completes the workflow and captures final results.

This switch-like behavior is centralized in `WorkflowManager::process_action`, which provides consistent branching and state updates.

## Conditional Logic and Branching

Each node can define a `NodeCondition`, such as `ResponseExists`, `ResponseEquals`, or `ResponseListNotEmpty`. When resolving the next node in a flow, these conditions are evaluated using the current `WorkflowState.responses` map. This allows workflows to dynamically branch based on user input, making them highly expressive without hardcoding logic in the backend.

## Orchestration with Kafka

Talky's workflow service integrates with Kafka to publish and consume workflow lifecycle events. For instance, when a workflow starts or updates, Kafka topics receive events for UI rendering, analytics, or distributed processing.

External server actions use Kafka to request and await responses. When a `RunServerAction` is determined to be external, the system emits a request to the appropriate Kafka topic and waits on a oneshot channel for the response. If the action completes successfully, the workflow progresses. Otherwise, errors or timeouts are logged and handled gracefully.

## User Preferences and Persistence

User responses and inputs can be persisted independently of workflow instances using the `UserWorkflowPreferences` structure. This allows workflows to pre-fill forms, customize behavior per user, or resume later with stored defaults.

The `save_user_preferences` and `get_user_preferences` functions expose this persistence layer, abstracting the response map into long-lived storage keyed by `(user_id, workflow_id)`.

## Serialization and Resource Rendering

Workflows are exposed to the frontend or API clients via `WorkflowResource` objects. These are constructed using `state_to_resource()`, which bundles the current node’s metadata with live responses, available actions, and layout hints. This snapshot approach ensures clients can reliably render the latest user-facing state without querying node trees separately.

## Error Handling and Timeouts

The engine uses custom error types via `thiserror`, and each method returns a `Result<T, WorkflowError>`. Errors like `NodeNotFound`, `InvalidState`, or `ServerActionFailed` are surfaced in a controlled manner. For external actions, timeouts are handled using `tokio::time::timeout`, and fallback behaviors are logged and enforced to prevent dangling workflows.

## Extending the Engine

The engine is designed to be extensible in several dimensions:

- Developers can define custom action types and handle them in `process_action`.
- Internal server actions can encapsulate business logic and return dynamic next steps.
- External server actions allow integration with external systems, AI models, or data services.
- Workflows can be versioned, templated, and reused across different contexts.

With a modular Rust backend and clean async orchestration, Talky's workflow engine is a robust platform for building dynamic, stateful interactions that adapt to user input, external logic, and runtime conditions.


Current bot:
```ts
export class MovieInfoCommandsService extends CommandService {
  constructor(registry: CommandRegistry) {
    super(registry);
  }

  storeResults: ServerActionResponseHandler = async (state) => {
    console.log(state, state.responses.follows)
    const follows = state.responses.tv_show_results.filter(result => state.responses.follows[result.id])
    return {
      CompleteWorkflow: { message: follows.length > 0 ? 'You are now following ' + follows.map(follow => follow.title).join(', ') + '.' : 'No changes made to your follows.' }
    }
  }

  fetchTvShows: ServerActionResponseHandler = async (state) => {
    return {
      UpdateResponses: {
        'tv_show_results': state.responses.show_name ? await search(state.responses.show_name as string, 'multi') : []
      }
    }
  }

  async onConnect(client: TalkyClient) {
    super.onConnect(client);
    const fetchTvShowsId = await this.registerServerAction(client, "fetch_tv_shows", this.fetchTvShows)
    const storeResultsId = await this.registerServerAction(client, "store_results", this.storeResults)
    const workflowId = await this.registerWorkflow(client, {
      id: "tv_show_search",
      name: "TV Show Search",
      description: "Search for TV shows by name and choose one",
      initial_node_id: "input_node",
      server_actions: {
        fetch_tv_shows: {
          id: fetchTvShowsId,
          name: "Fetch TV Shows",
          description: "Fetch a list of TV shows based on input",
        },
        store_results: {
          id: storeResultsId,
          name: "Store results",
          description: "Stores the results of this workflow",
        }
      },
      nodes: {
        input_node: {
          id: "input_node",
          title: "Follow a TV show or movie",
          description: null,
          layout: null,
          condition: "Always",
          parent_id: null,
          children: ["results_node", "no_results_node"],
          inputs: [
            {
              id: "show_name",
              label: "TV Show Name",
              input_type: { Text: { placeholder: "Enter a show name" } },
              default_value: null,
              required: true,
              width: "full"
            }
          ],
          actions: [
            {
              id: "fetch_action",
              label: "Search",
              action_type: "RunServerAction",
              target: "fetch_tv_shows",
              style: null
            }
          ]
        },
        results_node: {
          id: "results_node",
          title: "Follow a TV show or movie",
          description: null,
          layout: null,
          parent_id: "input_node",
          condition: { ResponseListNotEmpty: "tv_show_results" },
          children: [],
          inputs: [
            {
              id: "follows",
              label: "TV Shows",
              input_type: { List: { from_responses_id: "tv_show_results", item_key: "id", display_field: "title" } },
              default_value: null,
              required: false,
              width: "full"
            }
          ],
          actions: [
            {
              id: "select_show",
              label: "Select",
              action_type: "RunServerAction",
              target: "store_results",
              style: "primary"
            },
            {
              id: "cancel_action",
              label: "Cancel",
              action_type: "Cancel",
              target: null,
              style: "secondary"
            }
          ]
        },
        no_results_node: {
          id: "no_results_node",
          title: "Follow a TV show or movie",
          description: null,
          layout: null,
          parent_id: "input_node",
          condition: { ResponseEquals: { field: "tv_show_results", value: [] } },
          children: [],
          inputs: [
            {
              id: "no_results_text",
              label: "Nothing Found",
              input_type: { Display: { content: "No shows matched your search." } },
              default_value: null,
              required: false,
              width: "full"
            }
          ],
          actions: [
            {
              id: "ok_action",
              label: "OK",
              action_type: "Cancel",
              target: null,
              style: "primary"
            }
          ]
        }
      }
    })
    this.registry.registerCommand(
      {
        name: 'follow',
        description: 'Follow a TV show or movie',
        usage: `${this.registry.trigger}follow`,
        handler: this.followHandler.bind(this, workflowId)
      },
    );
    this.registerCommand(client, {
      id: 'follow',
      command: 'follow',
      workflow_id: workflowId,
      inputs: [],
      name: 'Follow TV show',
    })
  }
}

```
---
